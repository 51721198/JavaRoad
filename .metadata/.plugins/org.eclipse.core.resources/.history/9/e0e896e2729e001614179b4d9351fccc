package com.ld.runnable.terminating;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

public class Entrance {
	
	private static Count count = new Count();
	private static List<Entrance> entrances = new ArrayList<Entrance>();
	private int number = 0;
	private final int id;
	private static volatile boolean canceled = false;
	public static void cancel() { canceled = true;}
	public Entrance(int id){
		this.id = id;
		entrances.add(this);
	}
	
	public void run(){
		while(!canceled){
			synchronized (this) {
				++number;
			}
			System.out.println(this + "total: " +count.increment());
			try {
				TimeUnit.MILLISECONDS.sleep(100);
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println("sleep interrupted : 睡眠中断!!!!!");
			}
		}
		System.out.println("stopping "+ this);
	}
	public synchronized int getvalue(){
		return number
	}
	
	
	
}
