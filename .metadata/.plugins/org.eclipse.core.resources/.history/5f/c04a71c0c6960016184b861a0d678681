package com.ld.runnable.synchronize;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

public class Pair {

	private int x,y;
	public Pair(int x, int y){
		this.x = x;
		this.y = y;
	}
	public Pair(){this(0, 0);}
	
	public int getX(){return x;}
	public int gerY(){return y;}
	
	public void incrementX(){x++;}
	public void incrementY(){y++;}  //本句采用快捷键ctrl+alt+↓自动生成!!!!!!!!!!!
	
	public String toString(){
		return "x:"+x+ ",y: "+y;
	}
	
	@SuppressWarnings("serial")
	public class PairValuesNotEqualException extends RuntimeException{
		
		public PairValuesNotEqualException(){
			super("pair values not equal :" + Pair.this);
		}
	}
	
	public void checkState(){
		
		if(x != y){
			throw new PairValuesNotEqualException();
		}
	}
	
	public abstract class PariManager {  //only abstract class can have abstract method
		
		AtomicInteger checkCounter = new AtomicInteger(0);
		
		protected Pair pair = new Pair();
		private List<Pair> storage = Collections.synchronizedList(new ArrayList<Pair>());
		
		public synchronized Pair getPari(){
			
			return new Pair(pair.getX(),pair.gerY());
		}
		
		protected void store(Pair pair){
			storage.add(pair);
			try {
				TimeUnit.MILLISECONDS.sleep(50);
			} catch (InterruptedException ignore) {
				
			}
		}
		
		public abstract void increment();  //only abstract class can have abstract method
	}

	
}
